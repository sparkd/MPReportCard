#!/usr/bin/env python
# encoding: utf-8
"""
Created by 'bens3' on 2013-06-21.
Copyright (c) 2013 'bens3'. All rights reserved.
"""

import re
import csv
import luigi
from sqlalchemy import func, exists
from mp_data.tasks.base import BaseTask
from mp_data.lib.log import get_logger
from mp_data.model import PublicWhipIDModel, MemberModel
from mp_data.tasks.file import FileTask
from mp_data.data.public_whip_ids import PUBLIC_WHIP_IDS

log = get_logger(__name__)


class PublicWhipIDTask(BaseTask):

    """
    The http://www.edms.org.uk/data/ includes a PersonID - which is the same
    ID used on http://www.publicwhip.org.uk/ and TheyWorkForYou
    """

    session = luigi.Parameter(default=None)  # 12-13 - see available_sessions

    model = PublicWhipIDModel

    # We go back further to try and get all politicians - conservatives are better represented in
    #  last government sessions
    available_sessions = ['06-07', '07-08', '08-09', '09-10', '10-12', '12-13', '13-14', '14-15']

    def complete(self):

        # select id, name, start_date,party from members where not exists (select 1 from member_twfy where member_id = members.id) order by id;
        count = self.db_session.query(func.count('*')).select_from(MemberModel).filter(
            ~exists().where(
                PublicWhipIDModel.member_id == MemberModel.id
            )
        ).scalar()

        # If we have any members without a corresponding public whip id, this task is not complete
        return False if count else True

    def requires(self):
        for session in self.available_sessions:
            yield FileTask('http://www.edms.org.uk/data/mps_20%s.csv' % session)

    def run(self):

        # Create a dictionary mapping pims ID to member ID
        member_ids = {m.pims_id: m.id for m in self.db_session.query(MemberModel).all()}

        ids = {}

        for input in self.input():
            with input.open('r') as in_file:
                reader = csv.DictReader(in_file)
                for row in reader:

                    try:
                        member_id = member_ids[int(row['EDMI ID'])]
                    except KeyError:
                        continue
                    else:

                        # We're loping through the last 5 sessions to make sure we have
                        # everyone. To prevent duplications, we'll store in a dict
                        # and check if it exists before adding
                        if member_id not in ids:
                            ids[member_id] = self.model(
                                member_id=member_id,
                                pw_id=row['PersonID'],
                            )

        # Add the manual IDs
        for member_id, pw_id in PUBLIC_WHIP_IDS.items():
            ids[member_id] = self.model(
                member_id=member_id,
                pw_id=pw_id,
            )

        # Add them all
        self.db_session.add_all(ids.values())

        self.db_session.commit()


if __name__ == "__main__":
    luigi.run(main_task_cls=PublicWhipIDTask)